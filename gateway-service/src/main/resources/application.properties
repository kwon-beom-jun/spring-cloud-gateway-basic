
server.port=8080
spring.application.name=gateway
logging.level.root=info


# ==================================================================
# ✅ 중요
# Spring Cloud Gateway는 기본적으로 Spring WebFlux(reactive) 위에서 동작
# 전통적인 서블릿 기반(Spring MVC)에서는 server.servlet.context-path를 사용하지만,
# Reactive 애플리케이션에서는 해당 프로퍼티가 반드시 적용되지 않으므로, 테스트 시 적용되지 않았음
#server.servlet.context-path=/gateway

# ❌ 주의 ❌
# 이 설정은 WebFlux 기반에서는 내부 컨트롤러 매핑에 적용,
# Gateway의 라우팅(프록시)에서는 별도로 처리하는듯 하고 서비스 라우트시 에러가 발생
#spring.webflux.base-path=/gateway
# ==================================================================


#spring.cloud.config.uri
#	❌ Spring Boot 3.2 이상에서 제거됨	Config Server URI를 직접 지정
#spring.config.import=configserver
#	✅ 최신 Spring Boot 3.2 이상에서 사용	Config Server 설정을 가져오는 최신 방식

# Config Server 연결
#spring.cloud.config.uri=http://localhost:8888
#spring.config.import=configserver:http://localhost:8888

# Config Server에서 설정 가져오기
spring.config.import=optional:configserver:http://localhost:8888

# Eureka Client 등록
# ※ 중요 ※ 
# "Gateway 라우팅 설정-1", "Gateway 라우팅 설정-2" 는 필요하고, 
# pom.xml에 "spring-cloud-starter-netflix-eureka-client"가 있어야함
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.enabled=true


# ========================== gateway의 전체적인 동작 흐름 ==========================
# - Vue에서 http://localhost:8080/gateway/service-a/hello 요청을 보냄.
# - Filter로 /gateway 제거 후 Gateway가 경로(/service-a/**)가 일치하는지 확인.
# - 경로가 일치하면 Eureka에서 service-a의 IP 및 포트(192.168.1.102:9999)를 가져옴.
# - http://192.168.1.102:9999/service-a/hello로 요청을 전달함.
# - service-a에서 "Hello from Service A!" 응답을 보내고, Gateway가 이를 Vue로 전달함.
# ========================== gateway의 전체적인 동작 흐름 ==========================


# ============================ Gateway 라우팅 설정-1 ============================
# 해당 라우트(Route)의 **고유 식별자(ID)**
# 이름이 service-a인 서비스로 요청을 라우팅할 때 사용
# (주의) ID는 Eureka에 등록된 서비스명과 일치할 필요는 없지만, 일반적으로 일치하게 설정하는 것이 좋음
spring.cloud.gateway.routes[0].id=service-a

# lb://service-a는 로드 밸런서(Load Balancer) 기반으로 서비스 찾기를 의미
# Gateway가 Eureka에서 service-a의 인스턴스를 찾아서 라우팅
# 예를 들어, Eureka에 service-a가 아래와 같이 등록되었다면:
# 	UP (1) - 192.168.1.102:service-a:9999
# Gateway는 lb://service-a를 http://192.168.1.102:9999로 자동 변환하여 요청을 전달
#  만약 Eureka 없이 Gateway를 사용할 경우, lb://가 아닌 http://<실제 주소>를 사용
spring.cloud.gateway.routes[0].uri=lb://service-a

# Path=/service-a/**는 요청 경로가 /service-a/로 시작하는 경우에만 해당 라우트를 사용하도록 설정하는 조건
# 예제:
# 	http://localhost:8080/gateway/service-a/hello → Gateway에서 service-a로 전달
# 	http://localhost:8080/gateway/service-b/hello → ❌ service-a로 전달되지 않음
# 	http://localhost:8080/gateway/other → ❌ 아무 라우트에도 매칭되지 않음
spring.cloud.gateway.routes[0].predicates[0]=Path=/gateway/service-a/**

# StripPrefix=1은 base-path 설정 등으로 인해 원하는 대로 '/gateway'를 제거하지 못하므로,
# 정규 표현식을 사용하는 RewritePath 필터를 사용하여 '/gateway'를 제거
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/gateway/(?<remaining>.*), /${remaining}

# lb:// 없이 직접 주소를 사용할 수도 있음
# Eureka 없이 Gateway를 사용할 경우, 직접 서비스 주소를 지정하면 됩

# service-b 설정
spring.cloud.gateway.routes[1].id=service-b
spring.cloud.gateway.routes[1].uri=lb://service-b
spring.cloud.gateway.routes[1].predicates[0]=Path=/gateway/service-b/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/gateway/(?<remaining>.*), /${remaining}

# ============================ Gateway 라우팅 설정-1 ============================


# ============================ Gateway 라우팅 설정-2 ============================
# 유레카 사용하지 않고 직접 연결
# eureka.client.service-url.defaultZone, eureka.client.enabled=true 제거해야함
#spring.cloud.gateway.routes[0].id=service-a
#spring.cloud.gateway.routes[0].uri=http://localhost:9999
#spring.cloud.gateway.routes[0].predicates[0]=Path=/gateway/service-a/**
#spring.cloud.gateway.routes[0].filters[0]=RewritePath=/gateway/(?<remaining>.*), /${remaining}
#spring.cloud.gateway.routes[1].id=service-b
#spring.cloud.gateway.routes[1].uri=http://localhost:9998
#spring.cloud.gateway.routes[1].predicates[0]=Path=/gateway/service-b/**
#spring.cloud.gateway.routes[1].filters[0]=RewritePath=/gateway/(?<remaining>.*), /${remaining}
# ============================ Gateway 라우팅 설정-2 ============================


# ============================== 선택 및 옵션 사항 ===============================
# Eureka에서 인스턴스를 IP 기반으로 찾도록 설정
#eureka.instance.prefer-ip-address=true
#eureka.instance.ip-address=192.168.1.101

# Gateway가 Eureka에서 인스턴스를 동적으로 찾도록 설정
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
# ============================== 선택 및 옵션 사항 ===============================





